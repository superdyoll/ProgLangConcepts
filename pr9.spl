// Natural Numbers Calculation

// This function is a helper function for adding values together
let (int lambda (int) addAll = int lambda (int a)
{
    if (a == ()){
        0
    } else {
        a[0] + addAll(a[1:])
    }
})
{
// Helper function to loop any array endlessly
let (int lambda (int) loopit = int lambda (int x) {x . loopit(x)}){
/* This function calculates the reverse natural numbers sequence 
ie
1
2 1
3 2 1
4 3 2 1
*/
let (int lambda (int) nextStep = int lambda (int prev) {
    // calculate this step,
    let( int calc = ((prev.0)+loopit(1))) {
        // convert the results into a 2D array.
        ((()::(calc))[1:2]).(nextStep(calc))
    }
})
{
    // This function applies read() to each individual step of nextStep
    let (
        (int lambda(int)) lambda(int) nat_acc = (int lambda(int)) lambda (int numbers) {
            int lambda(int pointer) {
                // As soon as we run out of lines to read
                if(read()[0][pointer] == ()) {
                    ()
                } else {
                    addAll((numbers[pointer])*(read()[0])) . nat_acc(numbers)(pointer+1)
                }
            }
    }) {
        nat_acc(nextStep(()))(0)
    }
}
}
}